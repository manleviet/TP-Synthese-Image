//
// 
//  Une vue
//  Demonstration d'une vue d'un coin de la salle.
//
//  Dans ce code, j'ai utilise et améliore les codes sources suivants :
//  - L'exemple Balcony de POV-Ray
//  - L'exemple Fog de POV-Ray
//  - Trois exemples Atmospheric Media de POV-Ray
//  - L'exemple Clouds de POV-Ray
//  - L'exemple Rainbow de POV-Ray
//  - L'exemple GlassChess de POV-Ray
//  - Cacophony de Phil Brewer (http://www.irtc.org/stills/2006-04-30.html)
//  - Ghost Light de Bill Pragnell (http://www.irtc.org/stills/2006-10-31.html)
//  - Flower de Bernard Hatt (http://www.irtc.org/stills/2005-08-31.html)
//  - Juegos de Txemi Jendrix (http://www.irtc.org/stills/2002-02-28.html)
//  - Realistic Painting de Gail Shaw (http://www.irtc.org/stills/2002-02-28.html)
//  - Bench (http://www.oyonale.com/modeles.php?lang=en&page=31)
//  - Conference chaire (http://www.oyonale.com/modeles.php?lang=en&page=46)
//  - Glass (http://www.oyonale.com/modeles.php?lang=en&page=13)
//  - Lamp (http://www.oyonale.com/modeles.php?lang=en&page=30)
//  - Library generator (http://www.oyonale.com/modeles.php?lang=en&page=19)
//  - macro Candle_2 (http://www.f-lohmueller.de/pov_tut/objects/household/Candle_2.inc)
// 
//  LE Viet Man
//  28/01/2011
//
//

#include "functions.inc"
#include "colors.inc"
#include "textures.inc"
#include "shapes.inc"
           
//------------------------------------------------------           
// Controle
//------------------------------------------------------
// Camera
// 0 - regarder le coin ayant la fenetre
// 1 - regarder l'image de moi et ma femme
// 2 - regarder la fleur et le vase de vin
// 3 - regarder de facons flou la fleur et le vase de vin
// 4 - regarder la bougie

// 5 - regarder le coin de salle ayant le bahut et la table basse
// 6 - regarder l'echiquier

// 7 - regarder du centre de la salle vers le premier coin
// 8 - regarder du centre de la salle vers le deuxième coin
#declare Camera = 0;

#declare Sun = on;
#declare LightLamp = on;
#declare LightCandle = on;

#declare Radiosity = on;
#declare Photons = on;
#declare Atmospheric = on;

#declare show_GlassWindow = true;
//#declare TestLight = off;

//------------------------------------------------------
// Global Settings                                      
//------------------------------------------------------
global_settings{
	max_trace_level 10 // maximum number of recursive levels that POV-Ray will trace a ray
	assumed_gamma 1

	#if (Radiosity=on)
		radiosity{
			pretrace_start 0.08
			pretrace_end   0.01
			count 130
			nearest_count 5
			error_bound 0.3

			recursion_limit 1
			low_error_factor 0.5
			gray_threshold 0.0
			minimum_reuse 0.015
			brightness 1.0
			adc_bailout 0.01/2
			normal on
			media on

			always_sample off
			save_file "radiosity.rad"
			//load_file "radiosity.rad"
		}
	#end

	#if (Photons=on)
		photons {
			spacing 0.002
			media 100
			//save_file "photons.file"
			load_file "photons.file"
		}
	#end
}
       
//------------------------------------------------------
// Camera
//------------------------------------------------------
#include "camera.inc"

#switch (Camera)
    #case (0)
        camera { Camera0 }
    #break
    #case (1)
        camera { Camera1 }
    #break
    #case (2)
        camera { Camera2 }
    #break
    #case (3)
        camera { Camera3 }
    #break
    #case (4)
        camera { Camera4 }
    #break
    #case (5)
        camera { Camera5 }
    #break
    #case (6)
        camera { Camera6 }
    #break
    #case (7)
        camera { Camera7 }
    #break
    #case (8)
        camera { Camera8 }
    #break        
#end

//------------------------------------------------------
// Sun                                                
//------------------------------------------------------
/*#if (TestLight=on)
	light_source {
		<2, 2, 2>
		color rgb 0.7
	}
#end*/

// sun
#if (Sun=on)
    light_source {
    	<1500, 2000, 1500>
    	color rgb <3.43, 2.87, 1.95> * 1.2
    	
    	photons {
    		reflection off
    		refraction on
    	}
    }
#end

//------------------------------------------------------
// Fog
//------------------------------------------------------
fog{
   	fog_type 2
   	fog_alt 1.2
   	fog_offset 0
   	color rgbt <0.60, 0.68, 0.82, 0.0>
   	distance 30
   	up z
}

// atmospheric media can be generated by adding a media statement
// to the scene not attached to any specific object

/*media {    // atmospheric media sample
    intervals 10
    scattering { 1, rgb 0.03 }
    samples 1, 10
    confidence 0.9999
    variance 1/1000
    ratio 0.9
}*/

//------------------------------------------------------
// OBJECTS                                                      
//------------------------------------------------------

//------------------------------------------------------
// Exterior                                                      
//------------------------------------------------------

// Sky
sky_sphere {
    pigment {
        function { min(1, max(0,y)) }
        poly_wave 0.6
        color_map {
            [0 color rgb <31,52,159>/255]
            [1 color rgb <141,165,255>/255]
        }
    }
    
    // clouds
    pigment {
      bozo
      turbulence 0.65
      octaves 6
      omega 0.7
      lambda 2
      color_map {
          [0.0 0.1 color rgb <0.85, 0.85, 0.85>
                   color rgb <0.75, 0.75, 0.75>]
          [0.1 0.5 color rgb <0.75, 0.75, 0.75>
                   color rgbt <1, 1, 1, 1>]
          [0.5 1.0 color rgbt <1, 1, 1, 1>
                   color rgbt <1, 1, 1, 1>]
      }
      scale <0.2, 0.5, 0.2>
    }
}

#include "rainbow.inc"

#include "sea.inc"

object {
    Sea
}

#include "island.inc"

object {
    Island
    
    // transformer au centre de systeme de coordonnées
    #local rate = 800;
    scale 0.005 * rate   
    translate <-0.2 * rate + -0.7, -0.6 * rate + -1.18, 0.4 * rate + 0.2>
    // transformer a la coordonnee de l'ile
    translate <-250,6,30>
}

//------------------------------------------------------
// INTERIOR 1                                                    
//------------------------------------------------------
#declare Room_Height = 3;
#declare Room_Width = 3;
#declare Wall_Deep = .2;

#include "room.inc"  

object { Room(Room_Height, Room_Width, Wall_Deep, Atmospheric) }

#include "window.inc"

object { 
    Window(show_GlassWindow)
    
    scale <3.975, 2.975, 3> * 0.01    
    translate <Room_Width + 2.66, -0.625, Room_Width + 0.01> 
}

#include "dchaise_pov.inc"

object {
    Chaise
    
    scale 0.012
    rotate -y*120 
    translate <-Room_Width + 1, 0, Room_Width - 0.8>
}

#include "table.inc"

object { 
    Table
    
    scale 1.5
    rotate y*90
    translate <-Room_Width + 0.52, 0.75, Room_Width - 0.78> 
}

#include "bookcase.inc"

object {
    Bookcase
    
    scale 0.5
    rotate -y*90
    translate <-Room_Width, 0, -Room_Width + 1.85>
}

#include "picture.inc"

object { 
    Picture(11.85, 13.75, "pictures/lvman1.jpg", "Viet Man & Ngoc Trang", true) 
    
    scale 0.05
    rotate y * -90
    translate <-Room_Width + 0.007, Room_Height - 1.5, Room_Width - 0.9>
}

#include "flower.inc"

object {
    Flower
    
    scale 0.02
    rotate y*45 
    translate <-Room_Width + 1, 0.85, Room_Width - 0.38>
}

#include "candle.inc"

#if (LightCandle = on)
    #declare shining = 0.5;
#else
    #declare shining = 0;
#end

object { 
    Candle( shining,  // Shining_On, 0= off, >0 = intensity of candle light
              0.1, // Flame_Shadow, // >0 = intensity ; 0 = off
              1.0,  // Candle_Height, relative to diameter (d=1)
              1.2,  // Candle_Intensity,
              0.7   // Candle_Flame_Scale
              0.3,//3, // Fade_Distance, //  3 ~ 5
              2 // Fade_Power //   2,3,4
            ) // -------------------------
    
    scale 0.1
    scale z*0.7
    translate <-Room_Width + 0.6, 0.75, Room_Width - 1.2>
}

#include "cup.inc"

#declare rC = 1.5;
#declare C_Liquid = color rgbf<rC*233/255,rC*165/255,rC*135/255,0.999>;
#declare eGlass = 0.2;
#declare dotest = 0;

object{
    MakeGlass(eGlass, C_Liquid, dotest)         
    
    scale 0.007
    translate <-Room_Width + 0.9, 0.78, Room_Width - 0.38>
}

//------------------------------------------------------
// INTERIOR 2                                                    
//------------------------------------------------------

#include "carpet.inc"

object {
    Carpet
    
    scale <1, 1, 0.01>
    rotate -x*90
    translate <Room_Width - 1.5, 0, -Room_Width + 1.7>
}

#include "bench.inc"

object { 
    Bench
    
    scale 0.8 
    rotate y*90
    translate <Room_Width - 1.5, 0, -Room_Width + 1.7>
}

#include "sideboard.inc"

object {
    SideboardObjects
    
    rotate y*90 
    scale 1.5 
    translate <Room_Width - 0.35, 0, -Room_Width + 1.7>
}
  
  
#include "lamp.inc"

#if (LightLamp = on)
    object {
        Lamp_On 
        
        rotate y*20 
        translate <Room_Width - 1.3, 0, -Room_Width + 0.5>
    }
#else
    object {
        Lamp_Off 
        
        rotate y*20 
        translate <Room_Width - 1.3, 0, -Room_Width + 0.5>
    }
#end

object { 
    Picture(11.85, 13.75, "pictures/prettyloch.jpg", "", false) 
    
    scale 0.05
    rotate y * 90
    translate <Room_Width - 0.007, Room_Height - 1.5, -Room_Width + 1.65>
}

#include "chess.inc"

object {
    Chess
    
    scale 0.04
    rotate y*35
    translate <Room_Width - 1.6, 0.315, -Room_Width + 1.8>
}

#include "ball.inc"

object { 
    MirrorBall 
    
    scale 1.125
    rotate y*90
    translate <Room_Width - 1.6, 0.3, -Room_Width + 2.2>
}



